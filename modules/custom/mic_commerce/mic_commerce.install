<?php
/**
 * @file
 * Install for mic_commerce
 * Add product field to classes; Add product fields needed
 */

/**
 * Implements hook_install()
 *
 */
function mic_commerce_install() {
  $bundles = mic_commerce_bundles();
  mic_commerce_install_fields($bundles);
  mic_commerce_event_product_fields();
  theme_enable(array('mic_theme'));
  variable_set('admin_theme', 'seven');
  cache_clear_all();
}

/**
 * Bundles to install
 *
 * @return array
 */
function mic_commerce_bundles() {
  return array(
    'product-class',
  );
}

/**
 * Install fields for a given bundle of a product
 *
 * @param array $bundles an array of bundles
 */
function mic_commerce_install_fields($bundles, $module = 'mic_commerce', $entity = 'commerce_product') {
  foreach ($bundles as $bundle) {
    $bundle = str_replace('-', '_', $bundle);
    module_load_include('inc', $module, "fields/${module}.fields." . $bundle);
    $fields_function = "${module}_${bundle}_fields";
    foreach ($fields_function() as $field) {
      // create the field if it doesn't exist
      if (!field_info_field($field['field_config']['field_name'])) {
        field_create_field($field['field_config']);
      }
        // create the field instance if it doesn't exist
      if (!field_info_instance($entity, $field['field_instance']['field_name'], $bundle)) {
        field_create_instance($field['field_instance']);
      }
    }
    /* load and save extra field definitons, if they exist */
    $extra_fields_function = "${module}_${bundle}_extra_fields";
    if (function_exists($extra_fields_function)) {
      $settings = field_bundle_settings($entity, $bundle);
      foreach ($extra_fields_function() as $extra_field => $extra_field_settings) {
        $settings['extra_fields']['display'][$extra_field] = $extra_field_settings;
      }
      field_bundle_settings($entity, $bundle, $settings);
    }
  }
}

function mic_commerce_event_product_fields() {
  //ticket field
  field_create_field(array(
    'translatable' => '0',
    'entity_types' => array(),
    'settings' => array(),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
      'module' => 'field_sql_storage',
      'active' => '1',
      'details' => array(
        'sql' => array(
          'FIELD_LOAD_CURRENT' => array(
            'field_data_field_event_ticket' => array(
              'product_id' => 'field_event_ticket_product_id',
            ),
          ),
          'FIELD_LOAD_REVISION' => array(
            'field_revision_field_event_ticket' => array(
              'product_id' => 'field_event_ticket_product_id',
            ),
          ),
        ),
      ),
    ),
    'foreign keys' => array(
      'product_id' => array(
        'table' => 'commerce_product',
        'columns' => array(
          'product_id' => 'product_id',
        ),
      ),
    ),
    'indexes' => array(
      'product_id' => array(
        'product_id',
      ),
    ),
    'field_name' => 'field_event_ticket',
    'type' => 'commerce_product_reference',
    'module' => 'commerce_product_reference',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '-1',
    'deleted' => '0',
    'columns' => array(
      'product_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'bundles' => array(
      'node' => array(
        'event',
      ),
    ),
  ));
  field_create_instance(array(
    'label' => 'Ticket',
    'widget' => array(
      'weight' => '7',
      'type' => 'options_buttons',
      'module' => 'options',
      'active' => 1,
      'settings' => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        'autocomplete_path' => 'commerce_product/autocomplete',
      ),
    ),
    'settings' => array(
      'field_injection' => 1,
      'referenceable_types' => array(
        'product_ticket' => 'product_ticket',
        'product' => 0,
      ),
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'commerce_cart_add_to_cart_form',
        'weight' => '2',
        'settings' => array(
          'show_quantity' => 1,
          'default_quantity' => '1',
          'combine' => 1,
          'line_item_type' => 0,
        ),
        'module' => 'commerce_cart',
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_event_ticket',
    'entity_type' => 'node',
    'bundle' => 'event',
    'deleted' => '0',
  ));
}

function mic_commerce_update_7001(&$sandbox) {
  commerce_line_item_configure_line_item_types();
}