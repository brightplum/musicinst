<?php

/**
 * Implements hook_menu()
 *
 * @return array
 */
function mic_commerce_menu() {
  $items = array();

  $items['create/product-classes'] = array(
  	'title' => 'Product Class creation',
  	'page callback' => 'drupal_get_form',
    'page arguments' => array('mic_commerce_classes_products_form'),
  	'access arguments' => array('administer site configuration'),
  	'type' => MENU_CALLBACK,
  );

  $items['create/product-classes/%node'] = array(
  	'title' => 'Product Class creation',
  	'page callback' => 'mic_commerce_class_product_save',
    'page arguments' => array(2),
  	'access arguments' => array('administer site configuration'),
  	'type' => MENU_CALLBACK,
  );

  $items['addtocart/%dialog_js/%'] = array(
    'page callback' => 'mic_commerce_cart_ajax_callback',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

	return $items;
}

/**
 * Implements hook_default_rules_configuration().
 */
function mic_commerce_default_rules_configuration() {
  $rules = array();

  // Add a reaction rule to send order e-mail upon checkout completion.
  $rule = rules_reaction_rule();

  $rule->label = t('Send an order notification e-mail');
  $rule->active = TRUE;

  $rule
    ->event('commerce_checkout_complete')
    ->action('mail', array(
      'to:select' => 'commerce-order:mail',
      'subject' => t('Order [commerce-order:order-number] at [site:name]'),
      'message' => t("Thank you for participating with MIC. \r\nYour order number is [commerce-order:order-number].\r\n\r\n**Classes**\r\nPlease contact our offices at 847.905.1500 for further inquiries. \r\n\r\n**Event Tickets**\r\nTickets will be mailed to you if purchased more than 7 days in advance of the concert. \r\nOtherwise, your tickets will be available at the box office, located in the lobby of Nichols Concert Hall (open one hour before each concert). \r\nPlease bring your receipt with you.\r\n\r\n**Logging In**\r\nYou can view your order history with us at any time by logging into our website at: [site:login-url]\r\nYou can find the status of your current order at: [commerce-order:customer-url]."),
      'from' => '',
    ));

  // Adjust the weight so this rule executes after the order has been updated to
  // the proper user account.
  $rule->weight = 4;

  $rules['mic_commerce_checkout_order_email'] = $rule;

  return $rules;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function mic_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  //if event, set the event name as the event detail in the line item
  if ($form_state['line_item']->type == 'product_tkt' && $form_state['submitted'] == FALSE) {
    $node = menu_get_object();
    $form['line_item_fields']['field_lineitem_tkt_eventname'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->title;
    $form['line_item_fields']['field_lineitem_tkt_eventname'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';
  }
  if ($form_state['line_item']->type == 'product_class' && $form_state['submitted'] == FALSE) {
    $product = commerce_product_load($form['product_id']['#value']);
    $message = field_get_items('commerce_product', $product, 'field_class_student_msg');
    $message = (is_array($message)) ? $message[0]['value'] : 'Enter your Student Name';
    $title = 'Step 1. ' . $message;
    $form['line_item_fields']['field_class_lineitem_detail'][LANGUAGE_NONE][0]['value']['#title'] = $title;
    $form['submit']['#prefix'] = '<strong>' . t('Step 2.') . '</strong>&nbsp;';
  }
}

/**
 * Implements hook_form_views_form_commerce_cart_form_default_alter()
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function mic_commerce_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($user->uid == 0) {
    $create_account = l(t('create account'), 'user/register', array('query' => array('destination' => 'cart')));
    $login = l(t('login'), 'user/login', array('query' => array('destination' => 'checkout')));
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function mic_commerce_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function mic_commerce_views_api() {
  return array("version" => "3.0");
}

/**
 * Implements hook_page_build()
 *
 * @param array $page
 */
function mic_commerce_page_build(&$page) {
  global $theme;
  switch ($theme) {
    case 'mic_theme':
      $page['header5']['cart'] = array(
        '#markup' => mic_commerce_cart(),
      );
      break;
  }
}

/**
 * Implements hook_block_info()
 *
 * @return array
 */
function mic_commerce_block_info() {
  $blocks['mic_commerce_cart'] = array(
    'info' => t('MIC: Cart'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 *
 * @param string $delta
 * @return array
 */
function mic_commerce_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'mic_commerce_cart':
      $block['subject'] = '';
      $block['content'] = mic_commerce_cart();
      break;
  }
  return $block;
}

/**
 * Callback to display custom cart block
 *
 * @return array
 */
function mic_commerce_cart() {
  global $user;
  $user->name = ($user->uid) ? $user->name : FALSE;
  $num_items = mic_commerce_num_items_cart();
  return theme('mic_commerce_cart', array('num_items' => $num_items, 'name' => $user->name));
}

/**
 * Return number of items in user's cart
 *
 * @param unknown_type $user
 * @return unknown
 */
function mic_commerce_num_items_cart() {
  global $user;
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $num_items = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types());
    return $num_items;
  }

  return 0;
}

/**
 * Implements hook_theme()
 *
 * @return array
 */
function mic_commerce_theme() {
  return array(
    'mic_commerce_cart' => array(
      'variables' => array('num_items' => NULL, 'name' => NULL),
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'mic_commerce') . '/theme',
    ),
  );
}

/**
 * Implements hook_commerce_product_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_product_type_info() {
  return array(
    'product_ticket' => array(
      'type' => 'product_ticket',
      'name' => t('Ticket'),
      'description' => 'A ticket product to relate to events',
      'help' => '',
    ),
    'product_class' => array(
      'type' => 'product_class',
      'name' => t('Class'),
      'description' => 'A class product to relate to courses',
      'help' => '',
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['product_class'] = array(
    'name' => t('Product Class'),
    'description' => t('Line item type for product class'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add class'),
    'base' => 'commerce_product_line_item',
  );
  $line_item_types['product_tkt'] = array(
    'name' => t('Product Ticket'),
    'description' => t('Line item type for product ticket'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add ticket'),
    'base' => 'commerce_product_line_item',
  );
  $line_item_types['mic_newstudent_fee'] = array(
    'name' => t('MIC New Student Fee'),
    'description' => t('A MIC fee for new students.'),
    'product' => FALSE,
    'add_form_submit_value' => t('Add fee'),
    'callbacks' => array(
      'configuration' => 'mic_commerce_newstudent_fee_configuration',
      'title' => 'mic_commerce_newstudent_fee_title',
      'add_form' => 'mic_commerce_newstudent_fee_add_form',
      'add_form_submit' => 'mic_commerce_newstudent_fee_add_form_submit',
    ),
  );
  $line_item_types['product_pi'] = array(
    'name' => t('Product Private Instruction'),
    'description' => t('Line item type for product Private Instruction'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add Details'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

function mic_commerce_newstudent_fee_configuration($line_item_type) {
  $type = $line_item_type['type'];
}

function mic_commerce_newstudent_fee_title($line_item) {
  return(t('New Student Fee'));
}

function mic_commerce_newstudent_fee_add_form($element, &$form_state) {
  $form = array();
  return $form;
}

/**
 * Adds the selected product information to a line item added via a line item
 *   manager widget (on the admin order page).
 *
 * @param $line_item
 *   The newly created line item object.
 * @param $element
 *   The array representing the widget form element.
 * @param $form_state
 *   The present state of the form upon the latest submission.
 * @param $form
 *   The actual form array.
 *
 * @return
 *   NULL if all is well or an error message if something goes wrong.
 */
function mic_commerce_newstudent_fee_add_form_submit(&$line_item, $element, &$form_state, $form) {
  $line_item->line_item_label = t('New Student Fee');

  // Wrap the line item and product to easily set field information.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Provide a default price.
  $amount = 2500;
  $currency_code = 'USD';

  $line_item->commerce_unit_price = array('und' => array(
    '0' => array('amount' => $amount, 'currency_code' => $currency_code)
  ));

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    // Add the base price to the components array.
    if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) {
      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $line_item_wrapper->commerce_unit_price->value(),
        TRUE
      );
    }
  }
}

/**
 * Utility function which creates a new line item populated with the
 * a price of $5.00, etc..
 *
 * @param $order_id
 *   The ID of the order the line item belongs to (if available).
 *
 * @return
 *   The fully loaded line item..
 */
function mic_commerce_newstudent_fee_line_item_new($order_id = 0) {
  $type = 'mic_newstudent_fee';

  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => $type,
    'order_id' => $order_id,
    'quantity' => 1,
  ));

  $amount = 2500;
  $currency_code = 'USD';

  $line_item->commerce_unit_price = array('und' => array(
    '0' => array('amount' => $amount, 'currency_code' => $currency_code)
  ));

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    // Add the base price to the components array.
    if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) {
      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $line_item_wrapper->commerce_unit_price->value(),
        TRUE
      );
    }
  }
  // Return the line item.
  return $line_item;
}

/**
 * Implements hook_commerce_order_presave
 *
 * @param unknown_type $order
 */
function mic_commerce_commerce_order_presave($order) {
  // Find out if our order already has an mic_student_fee line item and if new student was checked.
  $type_exists = $new_student = FALSE;
  if (!empty($order->commerce_line_items['und'])) {
    foreach($order->commerce_line_items['und'] as $delta => $line_item_entry) {
      if ($line_item = commerce_line_item_load($line_item_entry['line_item_id'])) {
        if (isset($line_item->field_class_lineitem_newstud[LANGUAGE_NONE][0]['value']) && $line_item->field_class_lineitem_newstud[LANGUAGE_NONE][0]['value'] == 1) {
          $new_student = TRUE;
        }
        if ($line_item->type == 'mic_newstudent_fee') {
          $type_exists = TRUE;
          $line_item_fee_id = array(
            'delta' => $delta,
            'id' => $line_item->line_item_id
          );
          break;
        }
      }
    }
  }

  // If our line item is not yet in the order and the order has an ID,
  // create a line item to add to the order.
  if (!$type_exists && $order->order_id > 0) {
    if ($new_student) {
      $line_item = mic_commerce_newstudent_fee_line_item_new($order->order_id);
      commerce_line_item_save($line_item);
      $order->commerce_line_items[LANGUAGE_NONE][] = array('line_item_id' => $line_item->line_item_id);
    }
  }
  // If a new student was added, then removed and the fee remained, need to remove fee
  // if a continuing student is added to same order later
  else if ($type_exists && ($order->order_id > 0) && !$new_student) {
    commerce_line_item_delete($line_item_fee_id['id']);
    unset($order->commerce_line_items[LANGUAGE_NONE][$line_item_fee_id['delta']]);
  }
}

/**
 * Implements hook_commerce_product_presave().
 */
function mic_commerce_commerce_product_presave($product) {
  //generate nice autosku
  if (empty($product->sku) && ($product->type == 'product_class')) {
    module_load_include('inc', 'mic_commerce', 'includes/transfer');
    $semester_string = mic_commerce_get_semester_string($product, 'commerce_product');
    $instructor_string = mic_commerce_get_instructor_string($product, 'commerce_product');
    $day = mic_commerce_get_field_value($product, 'field_day_of_week', 'commerce_product');
    $location_string = mic_commerce_get_location_string($product, 'commerce_product');
    $time = mic_commerce_get_field_value($product, 'field_time', 'commerce_product');
    $sku[] = strtolower(str_replace(' ', '', $product->title));
    $sku[] = $semester_string;
    $sku[] = $instructor_string;
    $sku[] = strtolower($day['value']);
    $sku[] = $location_string;
    $sku[] = $time['value'];
    $sku = implode('-', $sku);

    ctools_include('cleanstring');
    $sku = ctools_cleanstring($sku);

    //Borrowed from pathauto...
    if (!commerce_product_validate_sku_unique($sku, $product->product_id)) {
      $original_sku = $sku;
      $i = 0;

      do {
        $sku = ctools_cleanstring($original_sku . '-' . $i);
        $i++;
      } while (!commerce_product_validate_sku_unique($sku, $product->product_id));
    }
    $product->sku = $sku;
  }
}

/**
 * Implementes hook_admin_paths()
 *
 * @return array
 */
function mic_commerce_admin_paths() {
  $paths = array(
    'create/product-classes' => TRUE,
  );
  return $paths;
}

/**
 * Classes, product build start form
 *
 * @return array
 */
function mic_commerce_classes_products_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start'),
  );

  return $form;
}

/**
 * Submit handler for classes, product build form
 *
 * @param array $form
 * @param array $form_state
 */
function mic_commerce_classes_products_form_submit(&$form, &$form_state) {
  $operations = array();

  //get all classes; put in batch to create matching products
  $classes = _mic_commerce_get_classes();
  foreach ($classes as $class) {
    $operations[] = array('mic_commerce_class_product_batch_create', array($class));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'mic_commerce_class_product_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch creation of products to classes relationship
 *
 * @param int $class
 * @param unknown_type $context
 */
function mic_commerce_class_product_batch_create($class, &$context) {
  $class_node = node_load($class->nid);

  //save product
  $product = mic_commerce_class_product_save($class_node);

  $context['message'] = t('Saved product %sku', array('%sku' => $product->sku));
}

/**
 * Callback when batch is finished
 *
 * @param unknown_type $success
 * @param unknown_type $results
 * @param unknown_type $operations
 */
function mic_commerce_class_product_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Import successful.'));
  }
  else {
    drupal_set_message(t('There were errors in the import.'));
  }
}

/**
 * Save a product, either new or existing
 *
 * @param object $class_node
 * @return object
 */
function mic_commerce_class_product_save($class_node) {
  module_load_include('inc', 'mic_commerce', 'includes/transfer');

  $price = mic_commerce_get_price($class_node);

  //save product
  $product = commerce_product_new('product_class');
  $product->title = $class_node->title;
  $product->commerce_price[LANGUAGE_NONE][0] = $price;
  $product->uid = 1;

  $semester_string = mic_commerce_get_semester_string($class_node);
  $instructor_string = mic_commerce_get_instructor_string($class_node);
  $sku[] = strtolower(str_replace(' ', '', $class_node->title));
  $sku[] = $semester_string;
  $sku[] = $instructor_string;
  $sku[] = $class_node->nid;
  $sku = implode('-', $sku);

  $product->sku = $sku;

  //get other fields
  foreach ($class_node as $field => $value) {
    if (strpos($field, 'field_') === 0) {
      $product->{$field} = $class_node->{$field};
    }
    else { continue; }
  }

  commerce_product_save($product);

  return $product;
}

/**
 * Create a simple add-to-cart form.
 *
 * @param $product_id
 *   The ID of the product to display.
 * @param $quantity
 *   The default number to be added to the cart, defaults to 1.
 * @param $show_quantity
 *   Boolean indicating whether or not to provide the quantity selector.
 * @param $order_id
 *   The order ID to be used, defaults to 0.
 *
 * @return
 *   A formatted add-to-cart form.
 */
function mic_commerce_add_to_cart($product_id, $quantity = 1, $show_quantity = FALSE, $order_id = 0) {
  // Load the product.
  $product = commerce_product_load($product_id);

  // Build the line item object.
  $line_item = commerce_line_item_new($product->type, $order_id);
  $line_item->data['context']['product_ids'] = array($product->product_id);
  $line_item->quantity = $quantity;

  // Get the form_id.
  $form_id = commerce_cart_add_to_cart_form_id(array($product->product_id), $line_item->quantity, $show_quantity);

  // Render the final output.
  $render = drupal_get_form($form_id, $line_item);
  return render($render);
}

/**
 * Ajax callback to load add-to-cart display in dialog
 *
 * @param string $js
 * @param int $product_id
 */
function mic_commerce_cart_ajax_callback($js, $product_id) {
  if ($js) {
    dialog_display(TRUE);
    $content = mic_commerce_add_to_cart($product_id);
    $output[] = dialog_command_display($content, array('title' => 'Add to Cart'));
    ajax_deliver(array('#type' => 'ajax', '#commands' => $output));
  }
  else {
    drupal_set_message('Unable to add item to your cart. Please contact us by phone.');
    drupal_goto('cart');
  }
}

/**
 * Implements hook_form_alter
 *
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 */
function mic_commerce_form_alter(&$form, &$form_state, $form_id) {
  //dialog for add_to_cart; breaks if JS compression is turned on
  if (strpos($form_id, 'commerce_cart_add_to_cart_form_') === 0) {
    //only do ajax for class forms
    if (isset($form['line_item_fields']['field_class_lineitem_detail']) && isset($form['line_item_fields']['field_class_lineitem_newstud'])) {
      $form['submit']['#ajax'] = array(
        'callback' => 'mic_commerce_ajax_callback_submit',
        'wrapper' => 'dialog-form-wrapper',
      );

      $form['#process'][] = 'dialog_process_ajax_form';
    }
  }

  //add filter options to orders overview on view
  if ($form_id == 'commerce_order_ui_redirect_form') {
    $options = array('' => '- All -');
    if ($vocabulary = taxonomy_vocabulary_machine_name_load('campus')) {
      if ($terms = taxonomy_get_tree($vocabulary->vid)) {
        foreach ($terms as $term) {
          $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
        }
      }
    }
    $semester_options = array('' => '- All -');
    if ($vocabulary = taxonomy_vocabulary_machine_name_load('semester')) {
      if ($terms = taxonomy_get_tree($vocabulary->vid)) {
        foreach ($terms as $term) {
          $semester_options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
        }
      }
    }
    $default = drupal_get_query_parameters();
    $form['location'] = array(
      '#title' => t('Campus'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $default['location'],
    );
    $form['semester'] = array(
      '#title' => t('Semester'),
      '#type' => 'select',
      '#options' => $semester_options,
      '#default_value' => $default['semester'],
    );
    //use different validate
    $form['#validate'][0] = 'mic_commerce_admin_commerce_orders_filter_validate';
    $form['#submit'][] = 'mic_commerce_admin_commerce_orders_filter_submit';
    $form['submit']['#value'] = t('Filter');
  }

  //add checkout button to redirect to login for non logged-in users
  if (strpos($form_id, 'views_form_commerce_cart_form_') === 0) {
    $form['actions']['checkout_redirect'] = array(
      '#markup' => '<span class="anonymous-checkout">' . l('Checkout', 'user/login', array('query' => array('destination' => 'cart'))) . '</span>',
      '#weight' => 5,
      '#access' => !(user_access('access checkout')),
    );
  }

  //generate auto-sku for class forms
  if (($form_id == 'commerce_product_ui_product_form') && ($form_state['commerce_product']->type == 'product_class')) {
    $form['sku']['#required'] = FALSE;
    $form['sku']['#disabled'] = TRUE;
    $form['sku']['#description'] = t('SKU will be automatically generated.');
  }
}

/**
 * Submit ajax callback for dialogs
 *
 * @return unknown
 */
function mic_commerce_ajax_callback_submit($form, &$form_state) {
  $commands = array();
  $commands[] = dialog_command_dismiss();
  $commands[] = dialog_command_reload();

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper to get all class nodes
 *
 * @return array
 */
function _mic_commerce_get_classes() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'item_class')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_sunset_date', 'value', time(), '>=')
    ->execute();

  return reset($result);
}

/**
 * Rules action: displays a the default translatable Add to Cart message.
 */
function mic_commerce_cart_rules_add_to_cart_message($product) {
  drupal_set_message(t('%title added to your cart. <a href="!cart-url">Check out now</a>.', array('%title' => $product->title, '!cart-url' => url('cart'))));
}

/**
 * Implements hook_views_query_alter
 *
 * @param unknown_type $view
 * @param unknown_type $query
 */
function mic_commerce_views_query_alter(&$view, &$query) {
  //add a tag to filter commerce_orders
  if ($view->name == 'commerce_orders') {
    $filters = drupal_get_query_parameters();
    if (!empty($filters)) {
      $query->add_tag('commerce_orders_filter');
    }
  }
}

/**
 * Implements hook_query_TAG_alter
 * Join line items, products for filtering of orders
 *
 * @param QueryAlterableInterface $query
 */
function mic_commerce_query_commerce_orders_filter_alter(QueryAlterableInterface $query) {
  $filters = drupal_get_query_parameters();
  $query
    ->leftJoin('commerce_line_item', 'cli', 'commerce_order.order_id = cli.order_id');
  $query
    ->leftJoin('commerce_product', 'cp', 'cli.line_item_label = cp.sku');
  if (isset($filters['location'])) {
    $tid = check_plain($filters['location']);
    $query
      ->leftJoin('field_data_field_location_reference', 'fdflr', 'fdflr.entity_id = cp.product_id');
    $query
      ->condition('fdflr.field_location_reference_tid', array($tid));
  }
  if (isset($filters['semester'])) {
    $tid = check_plain($filters['semester']);
    $query
      ->leftJoin('field_data_field_semester_reference', 'fdfsr', 'fdfsr.entity_id = cp.product_id');
    $query
      ->condition('fdfsr.field_semester_reference_tid', array($tid));
  }
  $query->distinct();
}

/**
 * Implements hook_views_pre_render
 *
 * @param unknown_type $view
 */
function mic_commerce_views_pre_render(&$view) {
  //change title based on filters; drupal_set_title doesn't seem to work
  if ($view->name == 'commerce_orders' && $view->current_display == 'admin_page') {
    //set page title
    $filters = drupal_get_query_parameters();
    $title = array();
    if (isset($filters['location'])) {
      $tid = check_plain($filters['location']);
      $location = taxonomy_term_load($tid);
      $title[] = $location->name;
    }
    if (isset($filters['semester'])) {
      $tid = check_plain($filters['semester']);
      $semester = taxonomy_term_load($tid);
      $title[] = $semester->name;
    }
    $title = implode(', ', $title);
    if ($title) {
      $view->build_info['title'] = t('Orders at @title', array('@title' => $title));
    }
  }
}

/**
 * Custom validate callback for orders filter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function mic_commerce_admin_commerce_orders_filter_validate($form, &$form_state) {
  $order = FALSE;

  // Attempt to load the specified order.
  if ($form_state['values']['identifier'] == 'order_number') {
    $order = commerce_order_load_by_number($form_state['values']['order_identifier']);
  }
  elseif ($form_state['values']['identifier'] == 'order_id') {
    $order = commerce_order_load($form_state['values']['order_identifier']);
  }

  // If the order could not be loaded by ID or number or the user does not have
  // view access for the order, throw an error.
  if ($order) {
    form_set_value($form['order'], $order, $form_state);
  }
}

/**
 * Custom submit callback for orders filter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function mic_commerce_admin_commerce_orders_filter_submit($form, &$form_state) {
  $location = $form_state['values']['location'];
  $semester = $form_state['values']['semester'];
  $order = $form_state['values']['order'];
  $current_filter = array();
  if (!$order) {
    if (!empty($location)) {
      $location_term = taxonomy_term_load($location);
      drupal_set_message(t('Filter: @location Campus', array('@location' => $location_term->name)));
      $current_filter['location'] = $location;
    }
    if (!empty($semester)) {
      $semester_term = taxonomy_term_load($semester);
      drupal_set_message(t('Filter: @semester', array('@semester' => $semester_term->name)));
      $current_filter['semester'] = $semester;
    }
    drupal_goto(current_path(), array('query' => array($current_filter)));
  }
}