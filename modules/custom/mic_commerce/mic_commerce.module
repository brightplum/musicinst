<?php

/**
 * Implements hook_menu()
 *
 * @return array
 */
function mic_commerce_menu() {
  $items = array();

	$items['create/product-classes'] = array(
		'title' => 'Product Class creation',
		'page callback' => 'drupal_get_form',
    'page arguments' => array('mic_commerce_classes_products_form'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
	);

	$items['create/product-classes/%node'] = array(
		'title' => 'Product Class creation',
		'page callback' => 'mic_commerce_class_product_save',
    'page arguments' => array(2),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function mic_commerce_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_page_build()
 *
 * @param array $page
 */
function mic_commerce_page_build(&$page) {
  global $theme;
  switch ($theme) {
    case 'mic_theme':
      $page['header5']['cart'] = array(
        '#markup' => mic_commerce_cart(),
      );
      break;
  }
}

/**
 * Implements hook_block_info()
 *
 * @return array
 */
function mic_commerce_block_info() {
  $blocks['mic_commerce_cart'] = array(
    'info' => t('MIC: Cart'),
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header5',
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 *
 * @param string $delta
 * @return array
 */
function mic_commerce_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'mic_commerce_cart':
      $block['subject'] = '';
      $block['content'] = mic_commerce_cart();
      break;
  }
  return $block;
}

/**
 * Callback to display custom cart block
 *
 * @return array
 */
function mic_commerce_cart() {
  global $user;
  $num_items = 0;
  if ($order = commerce_cart_order_load($user->uid)) {
    $num_items = field_get_items('commerce_order', $order, 'commerce_line_items');
    $num_items = ($num_items) ? count($num_items) : 0;
  }
  return theme('mic_commerce_cart', array('num_items' => $num_items, 'name' => $user->name));
}

/**
 * Implements hook_theme()
 *
 * @return array
 */
function mic_commerce_theme() {
  return array(
    'mic_commerce_cart' => array(
      'variables' => array('num_items' => NULL, 'name' => NULL),
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'mic_commerce') . '/theme',
    ),
  );
}

/**
 * Implements hook_commerce_product_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_product_type_info() {
  return array(
    'product_ticket' => array(
      'type' => 'product_ticket',
      'name' => t('Ticket'),
      'description' => 'A ticket product to relate to events',
      'help' => '',
    ),
    'product_class' => array(
      'type' => 'product_class',
      'name' => t('Class'),
      'description' => 'A class product to relate to courses',
      'help' => '',
    )
  );
}

/**
 * Implements hook_commerce_line_item_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['product_class'] = array(
    'name' => t('Product Class'),
    'description' => t('Line item type for product class'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add class'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_customer_profile_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_customer_profile_type_info() {
  return array(
    'prof_student' => array(
      'type' => 'prof_student',
      'name' => t('Student'),
      'description' => 'A student profile to relate to classes',
      'help' => '',
    )
  );
}

/**
 * Implementes hook_admin_paths()
 *
 * @return array
 */
function mic_commerce_admin_paths() {
  $paths = array(
    'create/product-classes' => TRUE,
  );
  return $paths;
}

/**
 * Classes, product build start form
 *
 * @return array
 */
function mic_commerce_classes_products_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start'),
  );

  return $form;
}

/**
 * Submit handler for classes, product build form
 *
 * @param array $form
 * @param array $form_state
 */
function mic_commerce_classes_products_form_submit(&$form, &$form_state) {
  $operations = array();

  //get all classes; put in batch to create matching products
  $classes = _mic_commerce_get_classes();
  foreach ($classes as $class) {
    $operations[] = array('mic_commerce_class_product_batch_create', array($class));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'mic_commerce_class_product_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch creation of products to classes relationship
 *
 * @param int $class
 * @param unknown_type $context
 */
function mic_commerce_class_product_batch_create($class, &$context) {
  $class_node = node_load($class->nid);

  //save product
  $product = mic_commerce_class_product_save($class_node);

  $context['message'] = t('Saved product %sku', array('%sku' => $product->sku));
}

/**
 * Callback when batch is finished
 *
 * @param unknown_type $success
 * @param unknown_type $results
 * @param unknown_type $operations
 */
function mic_commerce_class_product_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Import successful.'));
  }
  else {
    drupal_set_message(t('There were errors in the import.'));
  }
}

/**
 * Save a product, either new or existing
 *
 * @param object $class_node
 * @return object
 */
function mic_commerce_class_product_save($class_node) {
  module_load_include('inc', 'mic_commerce', 'includes/transfer');

  $price = mic_commerce_get_price($class_node);

  //save product
  $product = commerce_product_new('product_class');
  $product->title = $class_node->title;
  $product->commerce_price[LANGUAGE_NONE][0] = $price;
  $product->uid = 1;

  $semester_string = mic_commerce_get_semester_string($class_node);
  $instructor_string = mic_commerce_get_instructor_string($class_node);
  $sku[] = strtolower(str_replace(' ', '', $class_node->title));
  $sku[] = $semester_string;
  $sku[] = $instructor_string;
  $sku[] = $class_node->nid;
  $sku = implode('-', $sku);

  $product->sku = $sku;

  //get other fields
  foreach ($class_node as $field => $value) {
    if (strpos($field, 'field_') === 0) {
      $product->{$field} = $class_node->{$field};
    }
    else { continue; }
  }

  commerce_product_save($product);

  return $product;
}

/**
 * Create a simple add-to-cart form.
 *
 * @param $product_id
 *   The ID of the product to display.
 * @param $quantity
 *   The default number to be added to the cart, defaults to 1.
 * @param $show_quantity
 *   Boolean indicating whether or not to provide the quantity selector.
 * @param $order_id
 *   The order ID to be used, defaults to 0.
 *
 * @return
 *   A formatted add-to-cart form.
 */
function mic_commerce_add_to_cart($product_id, $quantity = 1, $show_quantity = FALSE, $order_id = 0) {
  // Load the product.
  $product = commerce_product_load($product_id);

  // Build the line item object.
  $line_item = commerce_line_item_new($product->type, $order_id);
  $line_item->data['context']['product_ids'] = array($product->product_id);
  $line_item->quantity = $quantity;

  // Get the form_id.
  $form_id = commerce_cart_add_to_cart_form_id(array($product->product_id), $line_item->quantity, $show_quantity);

  // Render the final output.
  $render = drupal_get_form($form_id, $line_item);
  return render($render);
}

/**
 * Helper to get all class nodes
 *
 * @return array
 */
function _mic_commerce_get_classes() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'item_class')
    ->execute();

  return reset($result);
}

