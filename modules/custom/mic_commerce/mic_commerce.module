<?php

/**
 * Implements hook_menu()
 *
 * @return array
 */
function mic_commerce_menu() {
  $items = array();

  $items['create/product-classes'] = array(
  	'title' => 'Product Class creation',
  	'page callback' => 'drupal_get_form',
    'page arguments' => array('mic_commerce_classes_products_form'),
  	'access arguments' => array('administer site configuration'),
  	'type' => MENU_CALLBACK,
  );

  $items['create/product-classes/%node'] = array(
  	'title' => 'Product Class creation',
  	'page callback' => 'mic_commerce_class_product_save',
    'page arguments' => array(2),
  	'access arguments' => array('administer site configuration'),
  	'type' => MENU_CALLBACK,
  );

  $items['addtocart/%dialog_js/%'] = array(
    'page callback' => 'mic_commerce_cart_ajax_callback',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

	return $items;
}

/**
 * Implements hook_default_rules_configuration().
 */
function mic_commerce_default_rules_configuration() {
  $rules = array();

  // Add a reaction rule to send order e-mail upon checkout completion.
  $rule = rules_reaction_rule();

  $rule->label = t('Send an order notification e-mail');
  $rule->active = TRUE;

  $rule
    ->event('commerce_checkout_complete')
    ->action('mail', array(
      'to:select' => 'commerce-order:mail',
      'subject' => t('Order [commerce-order:order-number] at [site:name]'),
      'message' => t("Thank you for participating with MIC. \r\nYour order number is [commerce-order:order-number].\r\n\r\n**Classes**\r\nPlease contact our offices at 847.905.1500 for further inquiries. \r\n\r\n**Event Tickets**\r\nTickets will be mailed to you if purchased more than 7 days in advance of the concert. \r\nOtherwise, your tickets will be available at the box office, located in the lobby of Nichols Concert Hall (open one hour before each concert). \r\nPlease bring your receipt with you.\r\n\r\n**Logging In**\r\nYou can view your order history with us at any time by logging into our website at: [site:login-url]\r\nYou can find the status of your current order at: [commerce-order:customer-url]."),
      'from' => '',
    ));

  // Adjust the weight so this rule executes after the order has been updated to
  // the proper user account.
  $rule->weight = 4;

  $rules['mic_commerce_checkout_order_email'] = $rule;

  return $rules;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function mic_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  $node = menu_get_object();
  //if event, set the event name as the event detail in the line item
  if ($node->type == 'event') {
    $form['line_item_fields']['field_lineitem_tkt_eventname'][LANGUAGE_NONE][0]['value']['#default_value'] = $node->title;
    $form['line_item_fields']['field_lineitem_tkt_eventname'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';
  }
  if ($form_state['line_item']->type == 'product_class' && $form_state['submitted'] == FALSE) {
    $product = commerce_product_load($form['product_id']['#value']);
    $message = field_get_items('commerce_product', $product, 'field_class_student_msg');
    $message = (is_array($message)) ? $message[0]['value'] : 'Enter your Student Name';
    $title = 'Step 1. ' . $message;
    $form['line_item_fields']['field_class_lineitem_detail'][LANGUAGE_NONE][0]['value']['#title'] = $title;
    $form['submit']['#prefix'] = '<strong>' . t('Step 2.') . '</strong>&nbsp;';
  }
}

/**
 * Implements hook_form_views_form_commerce_cart_form_default_alter()
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function mic_commerce_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {
  global $user;
  if ($user->uid == 0) {
    $create_account = l(t('create account'), 'user/register', array('query' => array('destination' => 'cart')));
    $login = l(t('login'), 'user/login', array('query' => array('destination' => 'checkout')));
    $form['#suffix'] = '<div class="cart-account-login">' . t('Please !create_account or !login to checkout.', array('!create_account' => $create_account, '!login' => $login)) . '</div></div>';
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function mic_commerce_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_page_build()
 *
 * @param array $page
 */
function mic_commerce_page_build(&$page) {
  global $theme;
  switch ($theme) {
    case 'mic_theme':
      $page['header5']['cart'] = array(
        '#markup' => mic_commerce_cart(),
      );
      break;
  }
}

/**
 * Implements hook_block_info()
 *
 * @return array
 */
function mic_commerce_block_info() {
  $blocks['mic_commerce_cart'] = array(
    'info' => t('MIC: Cart'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 *
 * @param string $delta
 * @return array
 */
function mic_commerce_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'mic_commerce_cart':
      $block['subject'] = '';
      $block['content'] = mic_commerce_cart();
      break;
  }
  return $block;
}

/**
 * Callback to display custom cart block
 *
 * @return array
 */
function mic_commerce_cart() {
  global $user;
  $user->name = ($user->uid) ? $user->name : FALSE;
  $num_items = mic_commerce_num_items_cart();
  return theme('mic_commerce_cart', array('num_items' => $num_items, 'name' => $user->name));
}

/**
 * Return number of items in user's cart
 *
 * @param unknown_type $user
 * @return unknown
 */
function mic_commerce_num_items_cart() {
  global $user;
  if ($order = commerce_cart_order_load($user->uid)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $num_items = commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types());
    return $num_items;
  }

  return 0;
}

/**
 * Implements hook_theme()
 *
 * @return array
 */
function mic_commerce_theme() {
  return array(
    'mic_commerce_cart' => array(
      'variables' => array('num_items' => NULL, 'name' => NULL),
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'mic_commerce') . '/theme',
    ),
  );
}

/**
 * Implements hook_commerce_product_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_product_type_info() {
  return array(
    'product_ticket' => array(
      'type' => 'product_ticket',
      'name' => t('Ticket'),
      'description' => 'A ticket product to relate to events',
      'help' => '',
    ),
    'product_class' => array(
      'type' => 'product_class',
      'name' => t('Class'),
      'description' => 'A class product to relate to courses',
      'help' => '',
    )
  );
}

/**
 * Implements hook_commerce_line_item_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_line_item_type_info() {
  $line_item_types = array();
  $line_item_types['product_class'] = array(
    'name' => t('Product Class'),
    'description' => t('Line item type for product class'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add class'),
    'base' => 'commerce_product_line_item',
  );
  $line_item_types['product_tkt'] = array(
    'name' => t('Product Ticket'),
    'description' => t('Line item type for product ticket'),
    'product' => TRUE,
    'add_form_submit_value' => t('Add ticket'),
    'base' => 'commerce_product_line_item',
  );

  return $line_item_types;
}

/**
 * Implementes hook_admin_paths()
 *
 * @return array
 */
function mic_commerce_admin_paths() {
  $paths = array(
    'create/product-classes' => TRUE,
  );
  return $paths;
}

/**
 * Classes, product build start form
 *
 * @return array
 */
function mic_commerce_classes_products_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start'),
  );

  return $form;
}

/**
 * Submit handler for classes, product build form
 *
 * @param array $form
 * @param array $form_state
 */
function mic_commerce_classes_products_form_submit(&$form, &$form_state) {
  $operations = array();

  //get all classes; put in batch to create matching products
  $classes = _mic_commerce_get_classes();
  foreach ($classes as $class) {
    $operations[] = array('mic_commerce_class_product_batch_create', array($class));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'mic_commerce_class_product_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch creation of products to classes relationship
 *
 * @param int $class
 * @param unknown_type $context
 */
function mic_commerce_class_product_batch_create($class, &$context) {
  $class_node = node_load($class->nid);

  //save product
  $product = mic_commerce_class_product_save($class_node);

  $context['message'] = t('Saved product %sku', array('%sku' => $product->sku));
}

/**
 * Callback when batch is finished
 *
 * @param unknown_type $success
 * @param unknown_type $results
 * @param unknown_type $operations
 */
function mic_commerce_class_product_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Import successful.'));
  }
  else {
    drupal_set_message(t('There were errors in the import.'));
  }
}

/**
 * Save a product, either new or existing
 *
 * @param object $class_node
 * @return object
 */
function mic_commerce_class_product_save($class_node) {
  module_load_include('inc', 'mic_commerce', 'includes/transfer');

  $price = mic_commerce_get_price($class_node);

  //save product
  $product = commerce_product_new('product_class');
  $product->title = $class_node->title;
  $product->commerce_price[LANGUAGE_NONE][0] = $price;
  $product->uid = 1;

  $semester_string = mic_commerce_get_semester_string($class_node);
  $instructor_string = mic_commerce_get_instructor_string($class_node);
  $sku[] = strtolower(str_replace(' ', '', $class_node->title));
  $sku[] = $semester_string;
  $sku[] = $instructor_string;
  $sku[] = $class_node->nid;
  $sku = implode('-', $sku);

  $product->sku = $sku;

  //get other fields
  foreach ($class_node as $field => $value) {
    if (strpos($field, 'field_') === 0) {
      $product->{$field} = $class_node->{$field};
    }
    else { continue; }
  }

  commerce_product_save($product);

  return $product;
}

/**
 * Create a simple add-to-cart form.
 *
 * @param $product_id
 *   The ID of the product to display.
 * @param $quantity
 *   The default number to be added to the cart, defaults to 1.
 * @param $show_quantity
 *   Boolean indicating whether or not to provide the quantity selector.
 * @param $order_id
 *   The order ID to be used, defaults to 0.
 *
 * @return
 *   A formatted add-to-cart form.
 */
function mic_commerce_add_to_cart($product_id, $quantity = 1, $show_quantity = FALSE, $order_id = 0) {
  // Load the product.
  $product = commerce_product_load($product_id);

  // Build the line item object.
  $line_item = commerce_line_item_new($product->type, $order_id);
  $line_item->data['context']['product_ids'] = array($product->product_id);
  $line_item->quantity = $quantity;

  // Get the form_id.
  $form_id = commerce_cart_add_to_cart_form_id(array($product->product_id), $line_item->quantity, $show_quantity);

  // Render the final output.
  $render = drupal_get_form($form_id, $line_item);
  return render($render);
}

/**
 * Ajax callback to load add-to-cart display in dialog
 *
 * @param string $js
 * @param int $product_id
 */
function mic_commerce_cart_ajax_callback($js, $product_id) {
  if ($js) {
    dialog_display(TRUE);
    $content = mic_commerce_add_to_cart($product_id);
    $output[] = dialog_command_display($content, array('title' => 'Add to Cart'));
    ajax_deliver(array('#type' => 'ajax', '#commands' => $output));
  }
  else {
    drupal_set_message('Unable to add item to your cart. Please contact us by phone.');
    drupal_goto('cart');
  }
}

/**
 * Implements hook_form_alter
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @param unknown_type $form_id
 */
function mic_commerce_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, 'commerce_cart_add_to_cart_form_') === 0) {
    $form['submit']['#ajax'] = array(
      'callback' => 'mic_commerce_ajax_callback_submit',
      'wrapper' => 'dialog-form-wrapper',
    );

    $form['#process'][] = 'dialog_process_ajax_form';
  }
}

/**
 * Submit ajax callback for dialogs
 *
 * @return unknown
 */
function mic_commerce_ajax_callback_submit() {
  $commands = array();
  $commands[] = dialog_command_dismiss();
  $commands[] = dialog_command_reload();

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper to get all class nodes
 *
 * @return array
 */
function _mic_commerce_get_classes() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'item_class')
    ->execute();

  return reset($result);
}

