<?php

/**
 * Implements hook_menu()
 *
 * @return array
 */
function mic_commerce_menu() {
  $items = array();

  $items['create/classes-products'] = array(
		'title' => 'Classes to Products Bulk Update',
		'page callback' => 'drupal_get_form',
    'page arguments' => array('mic_commerce_classes_products_form'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implements hook_page_build()
 *
 * @param array $page
 */
function mic_commerce_page_build(&$page) {
  global $theme;
  switch ($theme) {
    case 'mic_theme':
      $page['header5']['cart'] = array(
        '#markup' => mic_commerce_cart(),
      );
      break;
  }
}

/**
 * Implements hook_block_info()
 *
 * @return array
 */
function mic_commerce_block_info() {
  $blocks['mic_commerce_cart'] = array(
    'info' => t('MIC: Cart'),
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header5',
  );

  return $blocks;
}

/**
 * Implements hook_block_view()
 *
 * @param string $delta
 * @return array
 */
function mic_commerce_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'mic_commerce_cart':
      $block['subject'] = '';
      $block['content'] = mic_commerce_cart();
      break;
  }
  return $block;
}

/**
 * Callback to display custom cart block
 *
 * @return array
 */
function mic_commerce_cart() {
  global $user;
  $num_items = 0;
  if ($order = commerce_cart_order_load($user->uid)) {
    $num_items = field_get_items('commerce_order', $order, 'commerce_line_items');
    $num_items = ($num_items) ? count($num_items) : 0;
  }
  return theme('mic_commerce_cart', array('num_items' => $num_items, 'name' => $user->name));
}

/**
 * Implements hook_theme()
 *
 * @return array
 */
function mic_commerce_theme() {
  return array(
    'mic_commerce_cart' => array(
      'variables' => array('num_items' => NULL, 'name' => NULL),
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'mic_commerce') . '/theme',
    ),
  );
}

/**
 * Implements hook_commerce_product_type_info()
 *
 * @return array
 */
function mic_commerce_commerce_product_type_info() {
  return array(
    'product_ticket' => array(
      'type' => 'product_ticket',
      'name' => t('Ticket'),
      'description' => 'A ticket product to relate to events',
      'help' => '',
    ),
    'product_class' => array(
      'type' => 'product_class',
      'name' => t('Class'),
      'description' => 'A class product to relate to courses',
      'help' => '',
    )
  );
}

function mic_commerce_commerce_customer_profile_type_info() {
  return array(
    'prof_student' => array(
      'type' => 'prof_student',
      'name' => t('Student'),
      'description' => 'A student profile to relate to classes',
      'help' => '',
    )
  );
}

/**
 * Implementes hook_admin_paths()
 *
 * @return array
 */
function mic_commerce_admin_paths() {
  $paths = array(
    'create/classes-products' => TRUE,
  );
  return $paths;
}

/**
 * Classes, product build start form
 *
 * @return array
 */
function mic_commerce_classes_products_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start'),
  );

  return $form;
}

/**
 * Submit handler for classes, product build form
 *
 * @param array $form
 * @param array $form_state
 */
function mic_commerce_classes_products_form_submit(&$form, &$form_state) {
  $operations = array();

  //get all classes; put in batch to create matching products
  $classes = _mic_commerce_get_classes();
  foreach ($classes as $class) {
    $operations[] = array('mic_commerce_class_product_batch_create', array($class));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'mic_commerce_class_product_batch_finished',
  );

  batch_set($batch);
}

/**
 * Batch creation of products to classes relationship
 *
 * @param int $class
 * @param unknown_type $context
 */
function mic_commerce_class_product_batch_create($class, &$context) {
  $class_node = node_load($class->nid);

  //save product
  $product = mic_commerce_class_product_save($class_node);

  //save class with new product id
  mic_commerce_class_save($class_node, $product);

  $context['message'] = t('Saved product %sku', array('%sku' => $product->sku));
}

/**
 * Callback when batch is finished
 *
 * @param unknown_type $success
 * @param unknown_type $results
 * @param unknown_type $operations
 */
function mic_commerce_class_product_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Import successful.'));
  }
  else {
    drupal_set_message(t('There were errors in the import.'));
  }
}

/**
 * Save a product, either new or existing
 *
 * @param object $class_node
 * @return object
 */
function mic_commerce_class_product_save($class_node) {
  //check if product exists, if not, save new product
  if ($exists = _mic_commerce_check_existing_product($class_node->nid)) {
    $product = commerce_product_load(key($exists));
  }
  else {
    $product = commerce_product_new('product');
    $sku = strtolower(str_replace(' ', '', $class_node->title)) . '-nid' . $class_node->nid;

    $product->uid = 1;
    $product->sku = $sku;
  }

  $course_node = node_load(reset(field_get_items('node', $class_node, 'field_course_reference')));
  $semester = _mic_commerce_price_reference(reset(field_get_items('node', $class_node, 'field_semester_reference')));
  $number = reset(field_get_items('node', $course_node, 'field_' . $semester . '_price'));
  $price = array(
    'amount' => str_replace('.', '', $number['value']),
    'currency_code' => 'USD',
    'data' => array('components' => array()),
  );
  $number = reset(field_get_items('node', $course_node, 'field_' . $semester . '_materials_fees'));
  $materials_fees = (isset($number['value'])) ? array(
    'amount' => str_replace('.', '', $number['value']),
    'currency_code' => 'USD',
    'data' => array('components' => array()),
  ) : NULL;

  //save product
  $product->title = $class_node->title;
  $product->commerce_price[LANGUAGE_NONE][0] = $price;
  $product->field_commerce_class[LANGUAGE_NONE][0]['nid'] = $class_node->nid;
  if ($materials_fees) {
    $product->field_commerce_materialfees[LANGUAGE_NONE][0] = $materials_fees;
  }

  commerce_product_save($product);

  return $product;
}
/**
 * Save a class
 *
 * @param object $class_node
 * @param object $product
 */
function mic_commerce_class_save($class_node, $product) {
  $class_node->field_class_product[LANGUAGE_NONE][0]['product_id'] = $product->product_id;
  node_save($class_node);
}

/**
 * Helper to get all class nodes
 *
 * @return array
 */
function _mic_commerce_get_classes() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'item_class')
    ->execute();

  return reset($result);
}

/**
 * Helper to get the semester the price relates to
 *
 * @param int $tid
 * @return string
 */
function _mic_commerce_price_reference($tid) {
  $term = taxonomy_term_load($tid['tid']);
  $semester = strtolower(substr($term->name, 0, strpos($term->name, ' ')));
  return $semester;
}

/**
 * Helper to see if a product exists in the system by class relationship
 *
 * @param int $nid
 * @return array
 */
function _mic_commerce_check_existing_product($nid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_product')
    ->fieldCondition('field_commerce_class', 'nid', $nid)
    ->execute();

  return reset($result);
}