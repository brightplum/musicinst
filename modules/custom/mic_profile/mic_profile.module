<?php
/**
 * @file
 * Custom, key-required form to create user profiles
 */

define('MIC_PROFILE_PASS', crypt('micadmin', 'salt'));

/**
 * Implements hook_menu
 *
 * @return array
 */
function mic_profile_menu() {
  $items = array();

  $items['add/profile'] = array(
    'title' => 'Add a New Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mic_profile_add_profile_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'mic_profile.form.inc',
  );
  $items['add/profile/%node/thankyou'] = array(
    'title' => 'Thank-you for Adding a Profile',
    'page callback' => 'mic_profile_add_profile_thankyou',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info()
 *
 * @return array
 */
function mic_profile_block_info() {
  $blocks['mic_profile_instrument'] = array(
    'info' => t('MIC: List of Profiles by Instrument'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 */
function mic_profile_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'mic_profile_instrument':
      $block['subject'] = '';
      $block['content'] = mic_profile_instrument_program_area();
      break;
  }
  return $block;
}

/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param $view_mode
 * @param $langcode
 */
function mic_profile_node_view($node, $view_mode, $langcode) {
  if (($node->type == 'profile') && ($view_mode == 'full')) {
    drupal_add_css(drupal_get_path('module', 'mic_profile') . '/css/mic_profile.css', 'file');
  }
}

/**
 * Display related instruments and program areas.
 *
 * @return string
 */
function mic_profile_instrument_program_area() {
  $node = menu_get_object('node');
  $output = array();
  if (isset($node) && is_object($node)) {
    $fields = array(
      'instrument' => 'field_standard_instruments',
      'program_area' => 'field_standard_program_area',
    );
    foreach ($fields as $key => $field) {
      $field_values = field_get_items('node', $node, $field);
      if (is_array($field_values)) {
        foreach ($field_values as $field_value) {
          if (!isset($field_value['taxonomy_term'])) {
            $full_term = taxonomy_term_load($field_value['tid']);
            $term_name = $full_term->name;
          }
          else {
            $term_name = $field_value['taxonomy_term']->name;
          }
          $terms = mic_profile_get_taxonomy($key, $term_name);
          foreach ($terms as $term) {
            $output[] = '<strong>' . $term->name . '</strong>';
            $profile = mic_profile_get_profiles_by_taxonomy($term->tid);
            if ($profile) {
              $nodes = node_load_multiple(array_keys($profile));
              foreach ($nodes as $node) {
                $output[] = l($node->title, 'node/' . $node->nid);
              }
            }
          }
        }
      }
    }
  }
  return implode("<br />", $output);
}

/**
 * Thank-you message
 *
 * @param $node
 * @return array
 */
function mic_profile_add_profile_thankyou($node) {
  drupal_set_message('Thank-you. Your profile has been created.');
  return node_view($node, 'full');
}

/**
 * Return list of taxonomy terms
 *
 * @param $vocabulary_machine_name
 * @param null $term_name
 * @return array
 */
function mic_profile_get_taxonomy_options($vocabulary_machine_name, $term_name = NULL) {
  $terms = mic_profile_get_taxonomy($vocabulary_machine_name, $term_name);
  $options = array();
  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }

  return $options;
}

/**
 * Auth check function
 *
 * @param $phrase
 * @return bool
 */
function mic_profile_salt($phrase) {
  return (MIC_PROFILE_PASS == $phrase) ? TRUE : FALSE;
}

/**
 * Helper to lookup if profile with name already exists
 * Returns the nid if found
 *
 * @param string $name
 * @return int
 */
function mic_profile_namelookup($name) {
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('title', $name)
    ->execute()
    ->fetchCol();
  return reset($result);
}

function mic_profile_get_taxonomy($vocabulary_machine_name, $term_name = NULL) {
  $term = (isset($term_name)) ? taxonomy_get_term_by_name($term_name, $vocabulary_machine_name) : NULL;
  $parent = (isset($term)) ? array_keys($term) : 0;
  $parent = (is_array($parent)) ? reset($parent) : $parent;
  $vocab = taxonomy_vocabulary_machine_name_load($vocabulary_machine_name);
  $terms = taxonomy_get_tree($vocab->vid, $parent);
  return $terms;
}

function mic_profile_get_profiles_by_taxonomy($tid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'profile')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_profile_instruments', 'tid', $tid)
    ->fieldOrderBy('field_last_name', 'value')
    ->execute();

  return reset($result);
}