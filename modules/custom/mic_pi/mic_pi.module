<?php
/**
 * @file
 * MIC Private Instruction customizations
 */

/**
 * Implements hook_cart_line_item_refresh
 *
 * @param $line_item
 * @param $order_wrapper
 */
function mic_pi_commerce_cart_order_refresh($order_wrapper) {
//  $pi_line_item_ids = array();
//  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
//    $line_item = $line_item_wrapper->value();
//    if ($line_item) {
//      $type = $line_item->type;
//      if ($type == 'product_pi') {
//        $pi_line_item_ids[] = $line_item->line_item_id;
//      }
//      elseif ($type === 'product') {
//        $label = $line_item->line_item_label;
//        switch ($label) {
//          case 'paymentoption-finaid':
//            $discounted_price = 16000;
//            break;
//        }
//      }
//      else {
//        continue;
//      }
//    }
//  }
////  if (!empty($pi_line_item_ids) && isset($discounted_price)) {
////    foreach ($pi_line_item_ids as $pi_line_item_id) {
////      $line_item = commerce_line_item_load($pi_line_item_id);
////      mic_commerce_set_line_item_price($line_item, $discounted_price, 'commerce_unit_price');
////      mic_commerce_set_line_item_price($line_item, $discounted_price, 'commerce_total');
////      commerce_line_item_save($line_item);
////      entity_get_controller('commerce_line_item')->resetCache(array($line_item->line_item_id));
////    }
////  }
//  if (isset($discounted_price)) {
//    $base_price = array(
//      'amount' => $discounted_price,
//      'currency_code' => 'USD',
//      'data' => array(),
//    );
//    $order_wrapper->commerce_order_total->data = commerce_price_component_add($base_price, 'base_price', $base_price, TRUE);
//    $order_wrapper->commerce_order_total->amount = round($discounted_price);
//  }
}

function mic_pi_commerce_cart_line_item_refresh($line_item, $order_wrapper) {
  $pi_line_item_ids = array();
  if ($line_item) {
    $type = $line_item->type;
    if ($type === 'product') {
      $label = $line_item->line_item_label;
      switch ($label) {
        case 'paymentoption-finaid':
          $discounted_price = 16000;
          break;

        case 'paymentoption-installment':
          $discounted_price = 22500;
          break;

        case 'paymentoption-partial':
          $discounted_price = 50000;
          break;
      }
    }
  }
  if (isset($discounted_price)) {
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      $line_item = $line_item_wrapper->value();
      if ($line_item) {
        $type = $line_item->type;
        if ($type == 'product_pi') {
          $pi_line_item_ids[] = $line_item->line_item_id;
          break;
        }
        else {
          continue;
        }
      }
    }
    if (!empty($pi_line_item_ids)) {
      foreach ($pi_line_item_ids as $pi_line_item_id) {
        $line_item = commerce_line_item_load($pi_line_item_id);
        mic_commerce_set_line_item_price($line_item, $discounted_price, 'commerce_unit_price');
        mic_commerce_set_line_item_price($line_item, $discounted_price, 'commerce_total');
        commerce_line_item_save($line_item);
        entity_get_controller('commerce_line_item')->resetCache(array($line_item->line_item_id));
      }
    }
  }
}

function mic_pi_commerce_product_calculate_sell_price_line_item_alter($line_item) {
//  if ($line_item->type == 'product_pi') {
//    if (isset($_POST['op']) && ($_POST['op'] == 'Add to cart')) {
//      // Check which payment option is filled out
//      $fin_aid = (isset($_POST['line_item_fields']['field_pi_financial_aid'][LANGUAGE_NONE]))
//        ? $_POST['line_item_fields']['field_pi_financial_aid'][LANGUAGE_NONE]
//        : FALSE;
//      $payment_plan = (isset($_POST['line_item_fields']['field_pi_payment'][LANGUAGE_NONE]))
//        ? $_POST['line_item_fields']['field_pi_payment'][LANGUAGE_NONE]
//        : FALSE;
//      if ($fin_aid && ($fin_aid == 'Yes')) {
//        mic_commerce_set_line_item_price($line_item, 16000, 'commerce_unit_price');
//        mic_commerce_set_line_item_price($line_item, 16000, 'commerce_total');
//      }
//      elseif ($payment_plan) {
//        switch ($payment_plan) {
//          case 'installment':
//            $price = 22500;
//            break;
//
//          case 'partial':
//            $price = 50000;
//            break;
//        }
//        if (isset($price)) {
//          mic_commerce_set_line_item_price($line_item, $price, 'commerce_unit_price');
//          mic_commerce_set_line_item_price($line_item, $price, 'commerce_total');
//        }
//      }
//    }
//  }
}

/**
 * Implements hook_form_alter.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function mic_pi_form_alter(&$form, &$form_state, $form_id) {
  //get tooltip working
  if (strpos($form_id, 'commerce_cart_add_to_cart_form_') === 0) {
    // Customizations for Private Instruction form.
    if (isset($form['line_item_fields']) && ($form['line_item_fields']['#bundle'] == 'product_pi')) {
      // Check to see if pi type is set. If so, unset product options
      if (isset($form_state['line_item']->field_pi_type[LANGUAGE_NONE][0]['value'])) {
        $pi_type = $form_state['line_item']->field_pi_type[LANGUAGE_NONE][0]['value'];
        if ($pi_type == 'Suzuki') {
          unset($form['product_id']['#options'][851]);
          unset($form['product_id']['#options'][850]);
          unset($form['product_id']['#options'][161]);
        }
        elseif ($pi_type == 'Traditional') {
          unset($form['product_id']['#options'][854]);
          unset($form['product_id']['#options'][853]);
          unset($form['product_id']['#options'][852]);
        }
      }

      // Shove price dropdown into line items list for pre-render later
      $form['line_item_fields']['product_id'] = $form['product_id'];
      $form['product_id']['#type'] = 'hidden';

      // Add callback to type dropdown
      $form['line_item_fields']['field_pi_type'][LANGUAGE_NONE]['#ajax'] = array(
        'callback' => 'mic_pi_add_to_cart_type_callback',
        'method' => 'change',
        'wrapper' => 'pi_type_div',
      );

      // Add pre-render
      $form['line_item_fields']['#pre_render'][] = 'mic_pi_group_instruction_pre_render';

      // Grab entity information from the form.
      $entity_type = $form['line_item_fields']['#entity_type'];
      $bundle = $form['line_item_fields']['#bundle'];

      // Lookup field instance information for all of the entity's fields.
      $instances = field_info_instances($entity_type, $bundle);

      // Add tooltips to each of the form's fields where appropriate.
      foreach ($instances as $field_name => $instance) {
        if (isset($form['line_item_fields'][$field_name])) {
          if (!empty($instance['settings']['field_tooltips_enabled']) && !empty($instance['settings']['field_tooltips_tooltip'])) {
            // Translate field tooltip.
            if (module_exists('i18n_field')) {
              $instance['settings']['field_tooltips_tooltip']['value'] = i18n_field_translate_tooltip($instance, $instance['settings']['field_tooltips_tooltip']['value']);
            }

            // Add a class to the parent field form item. This will be used by
            // the tooltip JS to target the child field form items.
            $form['line_item_fields'][$field_name]['#attributes']['class'][] = 'field-tooltips';

            // Find all field form items and add the sanitized tooltip text as a
            // title attribute.
            foreach($form['line_item_fields'][$field_name][LANGUAGE_NONE] as $key => &$field) {
              if (is_numeric($key) && is_array($field)) {
                if (isset($field['value'])) {
                  $field['value']['#attributes']['title'] = check_markup($instance['settings']['field_tooltips_tooltip']['value'], $instance['settings']['field_tooltips_tooltip']['format']);
                }
                else {
                  $field['#attributes']['title'] = check_markup($instance['settings']['field_tooltips_tooltip']['value'], $instance['settings']['field_tooltips_tooltip']['format']);
                }
              }
            }
          }
        }
      }

      // Attach the tooltip library.
      $form['#attached']['library'][] = array('field_tooltips', 'tools.tooltip');
      $form['#attached']['js'][] = drupal_get_path('module', 'field_tooltips') . '/field_tooltips.js';
      $form['#attached']['css'][] = drupal_get_path('module', 'field_tooltips') . '/field_tooltips.css';

      // Add additional submit handler
      $form['#submit'][] = 'mic_pi_add_to_cart_form_submit';
    }
  }
}

/**
 * Additional submit handler to add more products
 *
 * @param $form
 * @param $form_state
 */
function mic_pi_add_to_cart_form_submit($form, &$form_state) {
  $line_item_submitted = $form_state['line_item'];

  // Setup order
  $order_id = $line_item_submitted->order_id;
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Add products if they exist on the line item
  $additional_products = array(
    'musicianship' => array(
      'field' => 'field_pi_musicianship',
      'value' => 'Yes',
    ),
    'paymentoption-finaid' => array(
      'field' => 'field_pi_financial_aid_payment',
      'value' => 1,
    ),
    'paymentoption-installment' => array(
      'field' => 'field_pi_payment',
      'value' => 'installment',
    ),
    'paymentoption-partial' => array(
      'field' => 'field_pi_payment',
      'value' => 'partial',
    ),
  );

  foreach ($additional_products as $sku => $line_item_values) {
    if (mic_commerce_check_line_item_value($line_item_submitted, $line_item_values['field'], $line_item_values['value'])) {
      $product = commerce_product_load_by_sku($sku);
      if (is_object($product)) {
        $line_item = commerce_product_line_item_new($product, 1, $order_id);
        commerce_line_item_save($line_item);
        $order_wrapper->commerce_line_items[] = $line_item;
        commerce_order_save($order);
      }
    }
  }
}

/**
 * Helper to cleanup form before rendering.
 *
 * @param $form
 * @return mixed
 */
function mic_pi_group_instruction_pre_render($form) {
  $form['group_instruction_type']['product_id'] = $form['product_id'];
  $form['group_instruction_type']['product_id']['#weight'] = 5;
  unset($form['product_id']);
  return $form;
}

/**
 * JSON callback when products refresh
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function mic_pi_add_to_cart_type_callback($form, $form_state) {
  $return = commerce_cart_add_to_cart_form_attributes_refresh($form, $form_state);
  return $return;
}