<?php

// Copyright (c) 2010 Trevor Sheridan. All Rights Reserved.

/**
 * Custom hook_define_pages to allow people to define a new page in their own module
 */

function blockpage_generate_pages() {

	$pages = module_invoke_all('define_pages');

	return $pages;

}

/**
 * Implementation of hook_permissions
 */

function blockpage_permission() {

  return array(
    'administer blockpage' => array(
      'title' => t('Administer BlockPage'),
    ),
    'view blockpages' => array(
    	'title' => t('View BlockPage(s)'),
    ),
  );

}

/**
 * Implementation of hook_menu
 * This will actually create the pages and register them with the menu system. It also includes a page for the admin section.
 */

function blockpage_menu() {

	$items = array();

	$pages = blockpage_generate_pages();

	foreach($pages as $key => $page) {

		$items[$key] = $page['menu'];

		if(is_admin_blockpage($key)) {

			$items[$key]['access arguments'] = array('administer blockpage');

		}

	}

	$items['admin/build/blockpage/list'] = array(

		'title' => t('List'),
    	'description' => 'Shows a list of all static BlockPages and their urls.',
    	'page callback' => 'blockpage_admin_page',
    	'access arguments' => array('administer blockpage'),
    	'type' => MENU_DEFAULT_LOCAL_TASK,
    	'weight' => -1000,

	);

	$items['admin/build/blockpage'] = array(

		'title' => t('BlockPage'),
    	'description' => 'Shows a list of all static BlockPages and their urls.',
    	'page callback' => 'blockpage_admin_page',
    	'access arguments' => array('administer blockpage'),
    	'type' => MENU_NORMAL_ITEM,

	);

	return $items;

}

/**
 * Implementation of hook_theme
 * This function will register the theme implementations we define. Currently the only implementation is default, in the future we will make it dynamic based on the value of the page-template key.
 */

function blockpage_theme($existing, $type, $theme, $path) {

	$pages = blockpage_generate_pages();

	$theme = array(

		'admin_template' => array(
			'arguments' => array(),
		),

	);

	foreach($pages as $key => $page) {

		if(isset($page['theme'])) {

			$theme[str_replace('-', '_', $page['theme']['template'])] = $page['theme'];

		}

	}

	return $theme;

}

/**
 * Implementation of hook_preprocess_page
 * This overwrites the base template suggests provided by drupal, and replaces the page template suggestions with values from the page-template value in the static variable $pages.
 */

function blockpage_preprocess_page(&$variables) {

	if (user_access('view blockpages')) {

		$pages = blockpage_generate_pages();

		foreach($pages as $key => $page) {

			if(!empty($page['page-template']['template'])) {

				$path_fragments = explode('/', $key);
				$path_difference = array_diff(arg(), $path_fragments);

				//ToDo make cascading work. A cascade will allow other URLs with the same args as this (test-page/some-other-page) use this template file. If no cascade is set then this template file will only work for this page.
				//$page['page-template']['cascade'] == true

				if(sizeof($path_difference) == 0) {

					//Since it equals 0, this means we are on the correct page
					$variables['template_files'][] = $page['page-template']['template'];
					$variables['theme_hook_suggestions'][] = str_replace('-', '_', $page['page-template']['template']);
					//print $page['page-template']['template'];

				}

			}

		}

	}

}


/**
 * Implementation of theme_hook
 */

function theme_admin_template() {

	$pages = blockpage_generate_pages();

	$head = array(
		array('data' => t('Path')),
		array('data' => t('Page Title')),
	);

	$rows = array();

	foreach($pages as $key => $page) {

		if(!is_admin_blockpage($key)) {

			$rows[] = array(
				array('data' => l($key, $key, array())),
				array('data' => $page['menu']['title']),
			);

		}

	}

	$html = "<div class=\"help\"><p>If a new block page was added and you are receiving a \"page not found\" error when trying to access it, you will want to clear the theme and menu caches.</p></div>";

	$html .= "<h2>All Registered BlockPages</h2>";

	$variables['header'] = $head;
	$variables['rows'] = $rows;
	$variables['attributes'] = array();
	$variables['caption'] = '';
	$variables['colgroups'] = array();
	$variables['sticky'] = 0;
	$variables['empty'] = '';

	$html .= theme_table($variables);

	return $html;

}

/**
 * Helper functions to build the pages
 */

function blockpage_admin_page() {

	return theme('admin_template');

}

/**
 * Helper fucntion to determine if a path is an admin blockpage
 */

function is_admin_blockpage($path) {

	$path_fragments = explode('/', $path);

//	if($path_fragments[2] == 'blockpage') {

//		return true;

//	} else {

		return false;

//	}

}

?>